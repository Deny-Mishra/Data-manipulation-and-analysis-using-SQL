
CREATE TABLE credit_cards (
    customer_id INT,
    age INT,
    income INT,
    credit_score INT,
    credit_limit INT,
    balance INT,
    monthly_spending INT,
    payment_delay INT,
    usage_pattern VARCHAR(255),
    reward_points INT
);

INSERT INTO credit_cards (customer_id, age, income, credit_score, credit_limit, balance, monthly_spending, payment_delay, usage_pattern, reward_points)
VALUES
(1, 35, 60000, 700, 8000, 1500, 1000, 0, 'Low', 50),
(2, 28, 45000, 650, 5000, 800, 500, 1, 'Moderate', 30),
(3, 45, 80000, 750, 12000, 2000, 1500, 2, 'High', 70),
(4, 40, 70000, 720, 10000, 1200, 800, 0, 'Moderate', 40),
(5, 32, 55000, 680, 6000, 1000, 700, 1, 'Low', 20),
(6, 37, 62000, 710, 8500, 1600, 1100, 3, 'Moderate', 55),
(7, 29, 48000, 640, 4800, 700, 450, 0, 'Low', 25),
(8, 42, 75000, 730, 9500, 1800, 1200, 1, 'High', 60),
(9, 34, 58000, 690, 7000, 1300, 900, 2, 'Moderate', 35),
(10, 31, 51000, 660, 5500, 900, 600, 0, 'Low', 15),
(11, 31, 140000, 795, 10000, 6500,4000,1,'low',25),
(12, 42, 165000, 699, 9000, 4500, 1100, 1, 'Moderate', 65)
(13, 38, 68000, 720, 11000, 1700, 1200, 2, 'High', 55),
(14, 27, 50000, 640, 5200, 850, 600, 0, 'Low', 18),
(15, 33, 62000, 710, 8000, 1300, 950, 1, 'Moderate', 40),
(16, 39, 75000, 730, 9200, 1900, 1300, 2, 'High', 70),
(17, 30, 55000, 670, 5600, 950, 700, 1, 'Low', 22),
(18, 36, 68000, 700, 8700, 1600, 1100, 3, 'Moderate', 55),
(19, 28, 48000, 630, 4900, 750, 500, 0, 'Low', 28),
(20, 41, 76000, 740, 9600, 2000, 1400, 1, 'High', 65),
(21, 35, 60000, 700, 8500, 1400, 1000, 2, 'Moderate', 35),
(22, 29, 52000, 660, 5400, 900, 650, 0, 'Low', 15),
(23, 32, 68000, 710, 8000, 1200, 900, 2, 'Moderate', 38),
(24, 37, 71000, 730, 9300, 1800, 1200, 1, 'High', 60)
(25, 31, 58000, 690, 7200, 1100, 800, 2, 'Moderate', 42),
(26, 35, 65000, 710, 8800, 1500, 1000, 1, 'High', 55),
(27, 28, 50000, 660, 5500, 800, 550, 0, 'Low', 20),
(28, 39, 72000, 740, 9500, 1700, 1200, 2, 'High', 65),
(29, 32, 55000, 680, 5800, 1000, 700, 1, 'Low', 25),
(30, 36, 68000, 710, 8600, 1600, 1100, 3, 'Moderate', 58),
(31, 29, 49000, 630, 5000, 750, 500, 0, 'Low', 28),
(32, 40, 76000, 730, 9400, 1900, 1300, 1, 'High', 70),
(33, 34, 59000, 700, 8200, 1400, 1000, 2, 'Moderate', 38),
(34, 30, 53000, 650, 5600, 900, 650, 0, 'Low', 15),
(35, 33, 67000, 710, 8100, 1200, 900, 2, 'Moderate', 35),
(36, 38, 71000, 730, 9200, 1800, 1200, 1, 'High', 60);

select * from credit_cards;

#Find the customers who have a credit limit higher than the average credit limit. Use a subquery to calculate the average credit limit.#
select * from credit_cards where credit_limit > (select avg(credit_limit) from credit_cards);

#Display the details of customers who have a balance greater than the average balance of customers aged 30 or below. Use a subquery in the FROM clause to get the average balance for customers aged 35 or above #
select avg(balance) from credit_cards; # avg balance = 1280------just for reference#
select * from credit_cards where balance > (select avg(balance) from credit_cards where age <= 35 );

#Retrieve the customers ID who have a credit score that matches any of the credit scores of customers aged 31. Use a subquery with the IN operator.#

SELECT customer_id, credit_score
FROM credit_cards
WHERE credit_score IN (SELECT credit_score FROM credit_cards WHERE age = 31);


#Find the customer with the highest reward points. Use a scalar subquery to obtain the maximum reward points.#
SELECT *
FROM credit_cards
WHERE reward_points = (SELECT MAX(reward_points) FROM credit_cards);


#Determine the average income of customers who have a balance greater than twice the average balance. Use a subquery to calculate the average balance.#
select avg(balance) from credit_cards; #avg balance = 1983------just for reference#
SELECT AVG(income) AS average_income
FROM credit_cards
WHERE balance > 2*(SELECT AVG(balance) FROM credit_cards);

#######Multiple Row Sub-QUERY#############
###Basically there are two types -- a. sub-query which returns multiple rows and multiple columns##
								 -- b. Sub-query which retuns one column and multiple rows#


#Multiple columns and multiple rows sub-queries#
#Find highest credit limit in each age category#
select age, max(credit_score) as maximum_creditscore
	from credit_cards
    group by age;
###the above part is the breakdown of complete query which is below##
select * 
from credit_cards 
where (credit_score, age) in (select age, max(credit_score) as maximum_creditscore
	                          from credit_cards
                              group by age);

#Find the highest monthly spending based on each usage pattern category#  USING IN in SUB QUERIES#                                      
SELECT *
FROM credit_cards
WHERE (usage_pattern, monthly_spending) not IN (
    SELECT usage_pattern, MAX(monthly_spending) AS maximum_spending
    FROM credit_cards
    GROUP BY usage_pattern
);

#single column and multiple rows sub query#
###
##
##
##
#Finding those customers whose credit balance remaining is greater than monthly spending#
#Using all and any in subqueries#
select * 
	from credit_cards
    where balance > all(select monthly_spending from credit_cards);
#Finding those customers whose credit balance remaining is greater than monthly spending#
#USING ANY operator#
select max(monthly_spending) from credit_cards; #maximum monthly spending = 4000#
#The query amount < ANY (SELECT amount FROM transactions) compares each row's amount with at least one value in the amount column.#
select * 
	from credit_cards
    where balance < any (select monthly_spending from credit_cards);
    
#correlated subqueries#
#Finding customers whose monthly spending is greater than average spending by usage pattern#
select usage_pattern, avg(monthly_spending) as average_monthlyspending from credit_cards group by usage_pattern;
select customer_id, monthly_spending, usage_pattern from credit_cards c1
		where monthly_spending > (select avg(monthly_spending)
								  from credit_cards c2 
                                  where c1.usage_pattern = c2.usage_pattern);
#here sub-query is dependent on c1.usage_pattern which is defined by outer query so they are correlated queries#
